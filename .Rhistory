res1<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ 1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=1,survivalOutcome=FALSE, SL.library=SLlib)
res0<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=0,survivalOutcome=FALSE, SL.library=SLlib)
summary(res1, res0)
y1mb<-summary(res1)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y0mb<-summary(res0)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y1mb-y0mb
res1<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ 1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=1,survivalOutcome=FALSE, SL.library=NULL)
res0<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=0,survivalOutcome=FALSE, SL.library=NULL)
summary(res1, res0)
y1mb<-summary(res1)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y0mb<-summary(res0)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y1mb-y0mb
library(slidify)
setwd("kararudolph/present")
slidify("index.Rmd")
publish(user = "cherrygarcia", repo = "DissertationUpdates", host = 'github')
slidify("index.Rmd")
publish(user = "cherrygarcia", repo = "DissertationUpdates", host = 'github')
set.seed(132)
n=100000
#covariates
z1<-rbinom(n, 1, .5)
z2<-rnorm(n,2,1)
# make treatment variable
prob.trt<-plogis(-2.5 + (log(1.5)*z2) + log(1.2)*I(z2^2))
t<-rbinom(n, 1, prob.trt)
mean(t)
# make selection into larger sample
beta0 <- -2.3
beta1 <- log(2)
prob.sel <- plogis(beta0+beta1*z1)
ipsvyselw<-1/prob.sel
mean(prob.sel)
alpha0<- 3
alpha1<- 2
meany0<- -3 + z2 + I(z2^2)
y0<-rnorm(n,meany0,2)
y1<-y0 + alpha0 + alpha1*z1 + rnorm(n,0,.5)
y<-ifelse(t==1, y1, y0)
ate <- mean(y1)-mean(y0)
ate
ss<-rbinom(n,1, prob.sel)
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
svysamp<-pop[ss==1,]
atesvysamp<-mean(svysamp$y1)-mean(svysamp$y0)
atesvysamp
alpha0<- 2
alpha1<- 2
meany0<- -3 + z2 + I(z2^2)
y0<-rnorm(n,meany0,2)
y1<-y0 + alpha0 + alpha1*z1 + rnorm(n,0,.5)
y<-ifelse(t==1, y1, y0)
ate <- mean(y1)-mean(y0)
ss<-rbinom(n,1, prob.sel)
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
svysamp<-pop[ss==1,]
atesvysamp<-mean(svysamp$y1)-mean(svysamp$y0)
atesvysamp
ate
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
svysamp$insubsample <- rbinom(nrow(svysamp), 1, plogis(beta0+ beta1*svysamp$z1 +
beta3*I(svysamp$z1^2) + beta2*svysamp$z2 ))
svysamp$yobs<-ifelse( svysamp$insubsample==0, NA, svysamp$y)
require(tmle)
svysamp$pscore.svy <- predict(glm(t ~ poly(z2,2), data=svysamp, family="binomial"), type="response")
summary(svysamp$pscore.svy)
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=svysamp, family="binomial")
data_new0<-svysamp
data_new0$t<-0
data_new1<-svysamp
data_new1$t<-1
svysamp$a1s1.ps<-predict(modelc, data=data_new1, type="response")
svysamp$a0s1.ps<-predict(modelc, data=data_new0, type="response")
W<-as.matrix(cbind(svysamp$z1, svysamp$z2))
W1<-W[,1]
W2<-W[,2]
modelc<-glm(insubsample ~ z1 + I(z1^2) + z2, data=svysamp, family="binomial")
data_new0<-svysamp
data_new0$t<-0
data_new1<-svysamp
data_new1$t<-1
svysamp$a1s1.ps<-predict(modelc, data=data_new1, type="response")
svysamp$a0s1.ps<-predict(modelc, data=data_new0, type="response")
W<-as.matrix(cbind(svysamp$z1, svysamp$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle2<-tmle(Y=svysamp$yobs, A=svysamp$t, W=W, Delta=svysamp$insubsample, Qform=Y ~1,
gform=A ~ W2 + I(W2^2), g.Deltaform=Delta~ W1 + I(W1^2) + W2)
fit.tmle1<-tmle(Y=svysamp$yobs, A=svysamp$t, W=W, Delta=svysamp$insubsample, Qform=Y ~1,
g1W=svysamp$pscore.svy, pDelta1=as.matrix(cbind(svysamp$a0s1.ps, svysamp$a1s1.ps)))
fit.tmle1
fit.tmle2
atesvysamp
svysamp$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
sum(svysamp$dif*svysamp$ipsvyselwt)/sum(svysamp$ipsvyselwt)
ate
require(ltmle)
##Just one selection mechanism
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
svysamp<-pop[ss==1,]
atesvysamp<-mean(svysamp$y1)-mean(svysamp$y0)
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
svysamp$insubsample <- rbinom(nrow(svysamp), 1, plogis(beta0+ beta1*svysamp$z1 +
beta3*I(svysamp$z1^2) + beta2*svysamp$z2 ))
svysamp$yb1<-(svysamp$y-min(svysamp$y))/(max(svysamp$y)-min(svysamp$y))
svysamp$yb2<-ifelse(svysamp$yb1<0.001, 0.001, svysamp$yb1)
svysamp$yb<-ifelse(svysamp$yb2>0.999, 0.999, svysamp$yb2)
svysamp$yobs<-ifelse(svysamp$insubsample==0, NA, svysamp$yb)
svysamp$insampleformat<-BinaryToCensoring(is.uncensored=svysamp$insample)
svysamp$insubsampleformat<-BinaryToCensoring(is.uncensored=svysamp$insubsample)
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- 0
beta1 <- .1
beta2 <- .1
beta3 <- .1
pop$insubsample[pop$insample==1] <- rbinom(nrow(pop[pop$insample==1,]), 1, plogis(beta0+
beta1*pop$z1[pop$insample==1] + beta3*I(pop$z1[pop$insample==1]^2)
+ beta2*pop$z2[pop$insample==1] ))
pop$insubsample[pop$insample==0] <- 0
pop$yb1<-(pop$y-min(pop$y))/(max(pop$y)-min(pop$y))
pop$yb2<-ifelse(pop$yb1<0.001, 0.001, pop$yb1)
pop$yb<-ifelse(pop$yb2>0.999, 0.999, pop$yb2)
pop$yobs<-ifelse(pop$insubsample==0, NA, pop$yb)
pop$tobs<-ifelse(pop$insample==0, NA, pop$y)
pop$pscore.svy[pop$insample==1] <- predict(glm(t ~ poly(z2,2), data=pop[pop$insample==1,],
family="binomial"), type="response")
pop$pscore.svy[pop$insample==0] <- 100000
pop$insampleformat<-BinaryToCensoring(is.uncensored=pop$insample)
pop$insubsampleformat<-BinaryToCensoring(is.uncensored=pop$insubsample)
ltmledata<-data.frame(pop$z1, pop$z2, pop$insampleformat,pop$t, pop$insubsampleformat, pop$yobs )
colnames(ltmledata)<-c("W1", "W2", "C1", "A", "C2", "Y")
##not necessary to specify that prior censoring indicates future censoring
res1<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ A + I(W2^2) + W2 + W1*A"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), stratify=FALSE,survivalOutcome=FALSE, SL.library=NULL)
res1<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ A + I(W2^2) + W2 + W1*A"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ),abar=1, stratify=FALSE,survivalOutcome=FALSE, SL.library=NULL)
res1
res0<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ A + I(W2^2) + W2 + W1*A"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=0,stratify=TRUE, survivalOutcome=FALSE, SL.library=NULL)
summary(res1, res0)
y1mb<-summary(res1)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y0mb<-summary(res0)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y1mb-y0mb
res1<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~ 1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=1, stratify=FALSE, survivalOutcome=FALSE, SL.library=NULL)
res0<- ltmle(data=ltmledata, Anodes="A", Cnodes=c("C1", "C2"), Ynodes="Y", Qform=c(Y="Q.kplus1 ~1"), gform=c("C1 ~ W1", "A ~ W2 + I(W2^2)", "C2 ~ W1 + I(W1^2) + W2" ), abar=0, stratify=FALSE, survivalOutcome=FALSE, SL.library=NULL)
summary(res1, res0)
y1mb<-summary(res1)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y0mb<-summary(res0)[1]$treatment$estimate*(max(pop$y)-min(pop$y))+min(pop$y)
y1mb-y0mb
ua <- rep(TRUE, n) #ua = uncensored and alive
L1 <- A1 <- Y1 <- C2.binary <- L2 <- A2 <- Y2 <- as.numeric(rep(NA, n))
W <- rnorm(n)
C1 <- BinaryToCensoring(is.uncensored=rexpit(2 + W))
ua <- ua & C1 == "uncensored"
L1[ua] <- rnorm(n)[ua] + W[ua]
A1[ua] <- rexpit(L1[ua])
A1[ua & L1 < -2] <- 1
A1[ua & L1 > 2] <- rbinom(n, size=1, prob=0.1)[ua & L1 > 2]
Y1[ua] <- rexpit((W + L1 - A1)[ua])
ua <- ua & !Y1
C2.binary[ua] <- rexpit((1 + 0.7 * L1 - A1)[ua])
C2 <- BinaryToCensoring(is.uncensored=C2.binary)
ua <- ua & C2 == "uncensored"
L2[ua] <- (0.5 * L1 - 0.9 * A1 + rnorm(n))[ua]
A2[ua] <- rexpit((0.5 * L1 + 0.8 * L2)[ua]) | A1[ua]
Y2[ua] <- rexpit((0.7 * L1 + L2 - 0.8 * A1 - A2)[ua])
Y2[Y1 == 1] <- 1 # if a patient dies at time 1, record death at time 2 as well
data <- data.frame(W, C1, L1, A1, Y1, C2, L2, A2, Y2)
deterministic.g.function <- function(data, current.node, nodes) {
if (names(data)[current.node] == "A1") {
det <- (data$L1 < -2 | data$L1 > 2) & !is.na(data$L1)
prob1 <- ((data$L1 < -2) * 1 + (data$L1 > 2) * 0.1)[det]
} else if (names(data)[current.node] == "A2") {
det <- data$A1 == 1 & !is.na(data$A1)
prob1 <- 1
}
}
rexpit <- function(x) rbinom(n=length(x), size=1, prob=plogis(x))
#
ua <- rep(TRUE, n) #ua = uncensored and alive
L1 <- A1 <- Y1 <- C2.binary <- L2 <- A2 <- Y2 <- as.numeric(rep(NA, n))
W <- rnorm(n)
C1 <- BinaryToCensoring(is.uncensored=rexpit(2 + W))
ua <- ua & C1 == "uncensored"
L1[ua] <- rnorm(n)[ua] + W[ua]
A1[ua] <- rexpit(L1[ua])
A1[ua & L1 < -2] <- 1
A1[ua & L1 > 2] <- rbinom(n, size=1, prob=0.1)[ua & L1 > 2]
Y1[ua] <- rexpit((W + L1 - A1)[ua])
ua <- ua & !Y1
C2.binary[ua] <- rexpit((1 + 0.7 * L1 - A1)[ua])
C2 <- BinaryToCensoring(is.uncensored=C2.binary)
ua <- ua & C2 == "uncensored"
L2[ua] <- (0.5 * L1 - 0.9 * A1 + rnorm(n))[ua]
A2[ua] <- rexpit((0.5 * L1 + 0.8 * L2)[ua]) | A1[ua]
Y2[ua] <- rexpit((0.7 * L1 + L2 - 0.8 * A1 - A2)[ua])
Y2[Y1 == 1] <- 1 # if a patient dies at time 1, record death at time 2 as well
data <- data.frame(W, C1, L1, A1, Y1, C2, L2, A2, Y2)
deterministic.g.function <- function(data, current.node, nodes) {
if (names(data)[current.node] == "A1") {
det <- (data$L1 < -2 | data$L1 > 2) & !is.na(data$L1)
prob1 <- ((data$L1 < -2) * 1 + (data$L1 > 2) * 0.1)[det]
} else if (names(data)[current.node] == "A2") {
det <- data$A1 == 1 & !is.na(data$A1)
prob1 <- 1
} else if (names(data[current.node]) %in% c("C1", "C2")){
return(NULL) #this returns the default of no deterministic links
#note that it is not necessary to specify that prior censoring indicates future censoring
} else {
stop("unexpected current.node")
}
return(list(is.deterministic=det, prob1=prob1))
}
result2 <- ltmle(data, Anodes=c("A1","A2"), Cnodes=c("C1", "C2"),
Lnodes=c("L1", "L2"), Ynodes=c("Y1", "Y2"), abar=c(1, 1),
deterministic.g.function=deterministic.g.function, survivalOutcome=TRUE)
summary(result2)
result2 <- ltmle(data, Anodes=c("A1","A2"), Cnodes=c("C1", "C2"),
Lnodes=c("L1", "L2"), Ynodes=c("Y1", "Y2"), abar=c(0, 0),
deterministic.g.function=deterministic.g.function, survivalOutcome=TRUE)
summary(result2)
result2 <- ltmle(data, Anodes=c("A1","A2"), Cnodes=c("C1", "C2"),
Lnodes=c("L1", "L2"), Ynodes=c("Y1", "Y2"), Qform=c(Y1="Q.kplus1 ~ 1", Y2="Q.kplus1 ~ 1"), abar=c(1, 1),
deterministic.g.function=deterministic.g.function, survivalOutcome=TRUE)
result2 <- ltmle(data, Anodes=c("A1","A2"), Cnodes=c("C1", "C2"),
Lnodes=c("L1", "L2"), Ynodes=c("Y1", "Y2"), Qform=c(Y1="Q.kplus1 ~ 1", Y2="Q.kplus1 ~ 1", L1="Q.kplus1 ~ 1", L2="Q.kplus1 ~ 1"), abar=c(1, 1),
deterministic.g.function=deterministic.g.function, survivalOutcome=TRUE)
result2 <- ltmle(data, Anodes=c("A1","A2"), Cnodes=c("C1", "C2"),
Lnodes=c("L1", "L2"), Ynodes=c("Y1", "Y2"), Qform=c(L1="Q.kplus1 ~ 1", Y1="Q.kplus1 ~ 1", L2="Q.kplus1 ~ 1", Y2="Q.kplus1 ~ 1" ), abar=c(1, 1),
deterministic.g.function=deterministic.g.function, survivalOutcome=TRUE)
summary(result2)
set.seed(132)
n=100000
#covariates
z1<-rnorm(n)
z2<-rnorm(n,2,1)
# make treatment variable
prob.trt<-plogis(-2.5 + (log(1.5)*z2) + log(1.2)*I(z2^2))
t<-rbinom(n, 1, prob.trt)
mean(t)
# make selection into larger sample
beta0 <- -2.3
beta1 <- log(2)
prob.sel <- plogis(beta0+beta1*z1)
ipsvyselw<-1/prob.sel
mean(prob.sel)
alpha0<- 3
alpha1<- 2
meany0<- -3 + z2 + I(z2^2)
y0<-rnorm(n,meany0,2)
y1<-y0 + alpha0 + alpha1*z1 + rnorm(n,0,.5)
y<-ifelse(t==1, y1, y0)
ate <- mean(y1)-mean(y0)
ss<-rbinom(n,1, prob.sel)
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
atesvysamp<-mean(pop$y1[pop$insample==1])-mean(pop$y0[pop$insample==1])
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
pop$insubsample[pop$insample==1] <- rbinom(nrow(pop[pop$insample==1,]), 1, plogis(beta0+
beta1*pop$z1[pop$insample==1] + beta3*I(pop$z1[pop$insample==1]^2)
+ beta2*pop$z2[pop$insample==1] ))
pop$insubsample[pop$insample==0] <- 0
pop$yobs<-ifelse(pop$insubsample==0, NA, pop$y)
pop$pscore.svy[pop$insample==1] <- predict(glm(t ~ poly(z2,2), data=pop[pop$insample==1,],
family="binomial"), type="response")
pop$pscore.svy[pop$insample==0] <- 100000
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=pop[pop$insample==1,], family="binomial")
data_new0<-pop[pop$insample==1,]
data_new0$t<-0
data_new1<-pop[pop$insample==1,]
data_new1$t<-1
pop$a1s1.ps[pop$insample==1]<-predict(modelc, data=data_new1, type="response")
pop$a1s1.ps[pop$insample==0]<-0
pop$a0s1.ps[pop$insample==1]<-predict(modelc, data=data_new0, type="response")
pop$a0s1.ps[pop$insample==0]<-0
pop$a1s1s1.ps<-pop$a1s1.ps*pop$prob.svysel
pop$a0s1s1.ps<-pop$a0s1.ps*pop$prob.svysel
W<-as.matrix(cbind(pop$z1, pop$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~1,
g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle2<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~1,
gform=A ~ W2 + I(W2^2), pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
pop$dif[pop$insample==1]<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
sum(pop$dif[pop$insample==1]*pop$ipsvyselwt[pop$insample==1])/sum(pop$ipsvyselwt[pop$insample==1])
pop$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
pop$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
sum(pop$dif*pop$ipsvyselwt)/sum(pop$ipsvyselwt)
atesvysamp<-mean(pop$y1[pop$insample==1])-mean(pop$y0[pop$insample==1])
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
pop$insubsample[pop$insample==1] <- rbinom(nrow(pop[pop$insample==1,]), 1, plogis(beta0+
beta1*pop$z1[pop$insample==1] + beta3*I(pop$z1[pop$insample==1]^2)
+ beta2*pop$z2[pop$insample==1] ))
pop$insubsample[pop$insample==0] <- 0
pop$yobs<-ifelse(pop$insubsample==0, NA, pop$y)
pop$pscore.svy[pop$insample==1] <- predict(glm(t ~ poly(z2,2), data=pop[pop$insample==1,],
family="binomial"), type="response")
pop$pscore.svy[pop$insample==0] <- 100000
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=pop[pop$insample==1,], family="binomial")
data_new0<-pop[pop$insample==1,]
data_new0$t<-0
data_new1<-pop[pop$insample==1,]
data_new1$t<-1
pop$a1s1.ps[pop$insample==1]<-predict(modelc, data=data_new1, type="response")
pop$a1s1.ps[pop$insample==0]<-0
pop$a0s1.ps[pop$insample==1]<-predict(modelc, data=data_new0, type="response")
pop$a0s1.ps[pop$insample==0]<-0
pop$a1s1s1.ps<-pop$a1s1.ps*pop$prob.svysel
pop$a0s1s1.ps<-pop$a0s1.ps*pop$prob.svysel
W<-as.matrix(cbind(pop$z1, pop$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~1,
gbound=.0001, g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle2<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~1,
gbound=.0001, gform=A ~ W2 + I(W2^2), pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
pop$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
sum(pop$dif*pop$ipsvyselwt)/sum(pop$ipsvyselwt)
fit.tmle1
ate=svysamp
atesvysamp<-mean(pop$y1[pop$insample==1])-mean(pop$y0[pop$insample==1])
atesvysamp
rm(list=ls())
set.seed(132)
n=100000
#covariates
z1<-rnorm(n)
z2<-rnorm(n,2,1)
# make treatment variable
prob.trt<-plogis(-2.5 + (log(1.5)*z2) + log(1.2)*I(z2^2))
t<-rbinom(n, 1, prob.trt)
mean(t)
# make selection into larger sample
beta0 <- -2.3
beta1 <- log(2)
prob.sel <- plogis(beta0+beta1*z1)
ipsvyselw<-1/prob.sel
mean(prob.sel)
alpha0<- 3
alpha1<- 2
meany0<- -3 + z2 + I(z2^2)
y0<-rnorm(n,meany0,2)
y1<-y0 + alpha0 + alpha1*z1 + rnorm(n,0,.5)
y<-ifelse(t==1, y1, y0)
ate <- mean(y1)-mean(y0)
ss<-rbinom(n,1, prob.sel)
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
atesvysamp<-mean(pop$y1[pop$insample==1])-mean(pop$y0[pop$insample==1])
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
pop$insubsample[pop$insample==1] <- rbinom(nrow(pop[pop$insample==1,]), 1, plogis(beta0+
beta1*pop$z1[pop$insample==1] + beta3*I(pop$z1[pop$insample==1]^2)
+ beta2*pop$z2[pop$insample==1] ))
pop$insubsample[pop$insample==0] <- 0
pop$yobs<-ifelse(pop$insubsample==0, NA, pop$y)
pop$pscore.svy[pop$insample==1] <- predict(glm(t ~ poly(z2,2), data=pop[pop$insample==1,],
family="binomial"), type="response")
pop$pscore.svy[pop$insample==0] <- 100000
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=pop[pop$insample==1,], family="binomial")
data_new0<-pop[pop$insample==1,]
data_new0$t<-0
data_new1<-pop[pop$insample==1,]
data_new1$t<-1
pop$a1s1.ps[pop$insample==1]<-predict(modelc, data=data_new1, type="response")
pop$a1s1.ps[pop$insample==0]<-0
pop$a0s1.ps[pop$insample==1]<-predict(modelc, data=data_new0, type="response")
pop$a0s1.ps[pop$insample==0]<-0
pop$a1s1s1.ps<-pop$a1s1.ps*pop$prob.svysel
pop$a0s1s1.ps<-pop$a0s1.ps*pop$prob.svysel
W<-as.matrix(cbind(pop$z1, pop$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~A + A:W1,
gbound=.0001, g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle2<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform=Y ~A + A:W1,
gbound=.0001, gform=A ~ W2 + I(W2^2), pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
pop$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
sum(pop$dif*pop$ipsvyselwt)/sum(pop$ipsvyselwt)
fit.tmle1
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform='Y ~A + A:W1',
gbound=.0001, g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle2<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform='Y ~A + A:W1',
gbound=.0001, gform=A ~ W2 + I(W2^2), pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle1
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform='Y ~A + A:W1',
g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle1
atesvysamp<-mean(pop$y1[pop$insample==1])-mean(pop$y0[pop$insample==1])
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
pop$insubsample[pop$insample==1] <- rbinom(nrow(pop[pop$insample==1,]), 1, plogis(beta0+
beta1*pop$z1[pop$insample==1] + beta3*I(pop$z1[pop$insample==1]^2)
+ beta2*pop$z2[pop$insample==1] ))
pop$insubsample[pop$insample==0] <- 0
pop$yobs<-ifelse(pop$insubsample==0, NA, pop$y)
pop$pscore.svy[pop$insample==1] <- predict(glm(t ~ poly(z2,2), data=pop[pop$insample==1,],
family="binomial"), type="response")
pop$pscore.svy[pop$insample==0] <- 100000
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=pop[pop$insample==1,], family="binomial")
data_new0<-pop[pop$insample==1,]
data_new0$t<-0
data_new1<-pop[pop$insample==1,]
data_new1$t<-1
pop$a1s1.ps[pop$insample==1]<-predict(modelc, data=data_new1, type="response")
pop$a1s1.ps[pop$insample==0]<-0
pop$a0s1.ps[pop$insample==1]<-predict(modelc, data=data_new0, type="response")
pop$a0s1.ps[pop$insample==0]<-0
pop$a1s1s1.ps<-pop$a1s1.ps*pop$prob.svysel
pop$a0s1s1.ps<-pop$a0s1.ps*pop$prob.svysel
W<-as.matrix(cbind(pop$z1, pop$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle1<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform='Y ~A + A:W1',
g1W=pop$pscore.svy, pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
fit.tmle2<-tmle(Y=pop$yobs, A=pop$t, W=W, Delta=pop$insubsample, Qform='Y ~A + A:W1',
gbound=.0001, gform=A ~ W2 + I(W2^2), pDelta1=as.matrix(cbind(pop$a0s1s1.ps, pop$a1s1s1.ps)))
rm(list=ls())
set.seed(132)
n=100000
#covariates
z1<-rnorm(n)
z2<-rnorm(n,2,1)
# make treatment variable
prob.trt<-plogis(-2.5 + (log(1.5)*z2) + log(1.2)*I(z2^2))
t<-rbinom(n, 1, prob.trt)
mean(t)
# make selection into larger sample
beta0 <- -2.3
beta1 <- log(2)
prob.sel <- plogis(beta0+beta1*z1)
ipsvyselw<-1/prob.sel
mean(prob.sel)
alpha0<- 3
alpha1<- 2
meany0<- -3 + z2 + I(z2^2)
y0<-rnorm(n,meany0,2)
y1<-y0 + alpha0 + alpha1*z1 + rnorm(n,0,.5)
y<-ifelse(t==1, y1, y0)
ate <- mean(y1)-mean(y0)
ss<-rbinom(n,1, prob.sel)
pop <- data.frame(t, y0,y1, y, ipsvyselw, z1, z2, ss, prob.trt, prob.sel)
colnames(pop)<-c("t","y0","y1", "y", "ipsvyselwt", "z1", "z2", "insample", "prob.trt", "prob.svysel")
svysamp<-pop[ss==1,]
atesvysamp<-mean(svysamp$y1)-mean(svysamp$y0)
# Selection model for selection into smaller sample
# Mean P(selection)=.5
beta0 <- -2
beta1 <- log(1.2)
beta2 <- log(2)
beta3 <- log(1.2)
svysamp$insubsample <- rbinom(nrow(svysamp), 1, plogis(beta0+ beta1*svysamp$z1 +
beta3*I(svysamp$z1^2) + beta2*svysamp$z2 ))
svysamp$yobs<-ifelse( svysamp$insubsample==0, NA, svysamp$y)
svysamp$pscore.svy <- predict(glm(t ~ poly(z2,2), data=svysamp, family="binomial"), type="response")
#estimate subsample probabilities from survey sample, separately for those treated and untreated
modelc<-glm(insubsample ~ poly(z1,2) + z2, data=svysamp, family="binomial")
data_new0<-svysamp
data_new0$t<-0
data_new1<-svysamp
data_new1$t<-1
svysamp$a1s1.ps<-predict(modelc, data=data_new1, type="response")
svysamp$a0s1.ps<-predict(modelc, data=data_new0, type="response")
W<-as.matrix(cbind(svysamp$z1, svysamp$z2))
W1<-W[,1]
W2<-W[,2]
fit.tmle1<-tmle(Y=svysamp$yobs, A=svysamp$t, W=W, Delta=svysamp$insubsample, Qform=Y ~1,
gbound=0.0001, g1W=svysamp$pscore.svy, pDelta1=(1/svysamp$ipsvyselwt)*(cbind(svysamp$a0s1.ps, svysamp$a1s1.ps)))
svysamp$dif<-fit.tmle1$Qstar[,2] - fit.tmle1$Qstar[,1]
fit.tmle1
sum(svysamp$dif*svysamp$ipsvyselwt)/sum(svysamp$ipsvyselwt)
fit.tmle2<-tmle(Y=svysamp$yobs, A=svysamp$t, W=W, Delta=svysamp$insubsample, Qform=Y ~1,
g1W=svysamp$pscore.svy, pDelta1=(1/svysamp$ipsvyselwt)*(cbind(svysamp$a0s1.ps, svysamp$a1s1.ps)))
svysamp$dif<-fit.tmle2$Qstar[,2] - fit.tmle2$Qstar[,1]
sum(svysamp$dif*svysamp$ipsvyselwt)/sum(svysamp$ipsvyselwt)
fit.tmle3<-tmle(Y=svysamp$yobs, A=svysamp$t, W=W, Delta=svysamp$insubsample, Qform=Y ~1,
gbound=0.0001, g1W=svysamp$pscore.svy, pDelta1=(cbind(svysamp$a0s1.ps, svysamp$a1s1.ps)))
svysamp$dif<-fit.tmle3$Qstar[,2] - fit.tmle3$Qstar[,1]
sum(svysamp$dif*svysamp$ipsvyselwt)/sum(svysamp$ipsvyselwt)
